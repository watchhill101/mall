import React, { useState, useEffect, useMemo } from 'react';
import {
  Card,
  Table,
  Form,
  Input,
  Button,
  Select,
  DatePicker,
  Space,
  Tag,
  Modal,
  Row,
  Col,
  message,
  Tooltip,
  Pagination
} from 'antd';
import {
  SearchOutlined,
  ReloadOutlined,
  EyeOutlined,
  FileExcelOutlined,
} from '@ant-design/icons';
import {
  getPaymentRecordsList,
  getPaymentRecordDetail,
  generatePaymentTestData,
  clearPaymentTestData
} from '../../../api/orders';
import OrderLayout from '../Order_layout/Order_layout';

const { RangePicker } = DatePicker;
const { Option } = Select;

const PaymentRecord = () => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [allData, setAllData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0
  });
  const [detailModalVisible, setDetailModalVisible] = useState(false);
  const [selectedRecord, setSelectedRecord] = useState(null);

  // 获取数据
  const fetchData = async (params = {}) => {
    setLoading(true);
    try {
      const response = await getPaymentRecordsList({
        page: pagination.current,
        pageSize: pagination.pageSize,
        ...params,
      });

      if (response.code === 200) {
        setAllData(response.data.list || []);
        setFilteredData(response.data.list || []);
        setPagination(prev => ({
          ...prev,
          total: response.data.total || 0,
          current: response.data.page || 1,
          pageSize: response.data.pageSize || 10
        }));
      } else {
        message.error(response.message || '获取数据失败');
        // 如果没有数据，显示提示
        if (response.data?.list?.length === 0) {
          setAllData([]);
          setFilteredData([]);
        }
      }
    } catch (error) {
      console.error('获取支付记录失败:', error);
      message.error('获取数据失败，可能需要先生成测试数据');
      // 设置空数据
      setAllData([]);
      setFilteredData([]);
    } finally {
      setLoading(false);
    }
  };

  // 生成测试数据
  const handleGenerateTestData = async () => {
    setLoading(true);
    try {
      const response = await generatePaymentTestData({ count: 50 });
      if (response.code === 200) {
        message.success(response.message);
        // 重新获取数据
        await fetchData();
      } else {
        message.error(response.message || '生成测试数据失败');
      }
    } catch (error) {
      console.error('生成测试数据失败:', error);
      message.error('生成测试数据失败');
    } finally {
      setLoading(false);
    }
  };

  // 清空测试数据
  const handleClearTestData = async () => {
    setLoading(true);
    try {
      const response = await clearPaymentTestData();
      if (response.code === 200) {
        message.success(response.message);
        // 清空本地数据
        setAllData([]);
        setFilteredData([]);
        setPagination(prev => ({ ...prev, total: 0 }));
      } else {
        message.error(response.message || '清空测试数据失败');
      }
    } catch (error) {
      console.error('清空测试数据失败:', error);
      message.error('清空测试数据失败');
    } finally {
      setLoading(false);
    }
  };

  // 初始化数据
  useEffect(() => {
    fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);



  // 支付方式选项
  const paymentMethodOptions = [
    { value: 'wechat', label: '微信支付' },
    { value: 'alipay', label: '支付宝' },
    { value: 'cash', label: '现金' },
    { value: 'bank_card', label: '刷卡' },
    { value: 'bank_transfer', label: '银行转账' },
    { value: 'voucher', label: '代金券' }
  ];

  // 支付状态选项
  const paymentStatusOptions = [
    { value: 'success', label: '已支付' },
    { value: 'pending', label: '待支付' },
    { value: 'processing', label: '处理中' },
    { value: 'failed', label: '支付失败' },
    { value: 'cancelled', label: '已取消' },
    { value: 'refunded', label: '已退款' }
  ];

  // 获取支付方式显示文本
  const getPaymentMethodText = (method) => {
    const option = paymentMethodOptions.find(item => item.value === method);
    return option ? option.label : method;
  };

  // 获取支付状态显示
  const getPaymentStatusTag = (status) => {
    const statusConfig = {
      success: { color: 'success', text: '已支付' },
      pending: { color: 'warning', text: '待支付' },
      processing: { color: 'processing', text: '处理中' },
      failed: { color: 'error', text: '支付失败' },
      cancelled: { color: 'default', text: '已取消' },
      refunded: { color: 'purple', text: '已退款' }
    };
    const config = statusConfig[status] || { color: 'default', text: status };
    return <Tag color={config.color}>{config.text}</Tag>;
  };

  // 表格列配置
  const columns = [
    {
      title: '收款单号',
      dataIndex: 'paymentId',
      key: 'paymentId',
      width: 150,
      fixed: 'left'
    },
    {
      title: '关联订单',
      dataIndex: 'orderId',
      key: 'orderId',
      width: 150
    },
    {
      title: '所属商家',
      dataIndex: 'merchantName',
      key: 'merchantName',
      width: 120
    },
    {
      title: '支付方式',
      dataIndex: 'paymentMethod',
      key: 'paymentMethod',
      width: 100,
      render: (method) => getPaymentMethodText(method)
    },
    {
      title: '订单金额',
      dataIndex: 'paymentAmount',
      key: 'paymentAmount',
      width: 100,
      render: (amount) => amount ? `¥${Number(amount).toFixed(2)}` : '¥0.00'
    },
    {
      title: '实收金额',
      dataIndex: 'actualAmount',
      key: 'actualAmount',
      width: 100,
      render: (amount) => amount ? `¥${Number(amount).toFixed(2)}` : '¥0.00'
    },
    {
      title: '支付状态',
      dataIndex: 'paymentStatus',
      key: 'paymentStatus',
      width: 100,
      render: (status) => getPaymentStatusTag(status)
    },
    {
      title: '支付时间',
      dataIndex: 'paymentTime',
      key: 'paymentTime',
      width: 160
    },
    {
      title: '客户电话',
      dataIndex: 'customerPhone',
      key: 'customerPhone',
      width: 120
    },
    {
      title: '操作',
      key: 'action',
      width: 120,
      fixed: 'right',
      render: (_, record) => (
        <Space>
          <Button
            type="link"
            size="small"
            icon={<EyeOutlined />}
            onClick={() => handleViewDetail(record)}
          >
            详情
          </Button>
        </Space>
      )
    }
  ];

  // 数据筛选
  const filterData = (data, params) => {
    return data.filter(item => {
      // 按收款单号筛选
      if (params.paymentId && !item.paymentId.toLowerCase().includes(params.paymentId.toLowerCase())) {
        return false;
      }

      // 按订单号筛选
      if (params.orderId && !item.orderId.toLowerCase().includes(params.orderId.toLowerCase())) {
        return false;
      }

      // 按商家名称筛选
      if (params.merchantName && !item.merchantName.toLowerCase().includes(params.merchantName.toLowerCase())) {
        return false;
      }

      // 按支付方式筛选
      if (params.paymentMethod && item.paymentMethod !== params.paymentMethod) {
        return false;
      }

      // 按支付状态筛选
      if (params.paymentStatus && item.paymentStatus !== params.paymentStatus) {
        return false;
      }

      // 按支付时间范围筛选
      if (params.paymentTime && params.paymentTime.length === 2) {
        const [startDate, endDate] = params.paymentTime;
        const itemDate = new Date(item.paymentTime);

        if (startDate && itemDate < startDate.toDate()) {
          return false;
        }

        if (endDate && itemDate > endDate.toDate()) {
          return false;
        }
      }

      return true;
    });
  };

  // 搜索处理
  const handleSearch = (values) => {
    setLoading(true);

    setTimeout(() => {
      const filtered = filterData(allData, values);
      setFilteredData(filtered);
      setPagination(prev => ({ ...prev, current: 1, total: filtered.length }));
      setLoading(false);
    }, 500);
  };

  // 重置处理
  const handleReset = () => {
    form.resetFields();
    setFilteredData(allData);
    setPagination(prev => ({ ...prev, current: 1, total: allData.length }));
    message.info('已重置搜索条件');
  };

  // 查看详情
  const handleViewDetail = (record) => {
    setSelectedRecord(record);
    setDetailModalVisible(true);
  };

  // 导出处理
  const handleExport = () => {
    message.success('导出成功');
  };

  // 刷新处理
  const handleRefresh = () => {
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      message.success('刷新成功');
    }, 1000);
  };

  // 分页处理
  const handleTableChange = (paginationConfig) => {
    const newPagination = {
      ...pagination,
      current: paginationConfig.current,
      pageSize: paginationConfig.pageSize
    };
    setPagination(newPagination);

    // 重新获取数据
    fetchDataWithPagination(newPagination);
  };

  // 带分页参数获取数据
  const fetchDataWithPagination = async (paginationParams = pagination) => {
    setLoading(true);
    try {
      const response = await getPaymentRecordsList({
        page: paginationParams.current,
        pageSize: paginationParams.pageSize,
      });

      if (response.code === 200) {
        setAllData(response.data.list || []);
        setFilteredData(response.data.list || []);
        setPagination(prev => ({
          ...prev,
          total: response.data.total || 0,
          current: response.data.page || paginationParams.current,
          pageSize: response.data.pageSize || paginationParams.pageSize
        }));
      } else {
        message.error(response.message || '获取数据失败');
        setAllData([]);
        setFilteredData([]);
      }
    } catch (error) {
      console.error('获取支付记录失败:', error);
      message.error('获取数据失败');
      setAllData([]);
      setFilteredData([]);
    } finally {
      setLoading(false);
    }
  };

  // 当前页数据
  const currentPageData = useMemo(() => {
    const startIndex = (pagination.current - 1) * pagination.pageSize;
    const endIndex = startIndex + pagination.pageSize;
    return filteredData.slice(startIndex, endIndex);
  }, [filteredData, pagination]);

  return (
    <OrderLayout>
      <div style={{ padding: '24px' }}>
        {/* 搜索表单 */}
        <Card className="search-card" style={{ marginBottom: '16px' }}>
          <Form form={form} onFinish={handleSearch} layout="vertical">
            <Row gutter={16}>
              <Col span={6}>
                <Form.Item label="收款单号" name="paymentId">
                  <Input placeholder="请输入收款单号" />
                </Form.Item>
              </Col>
              <Col span={6}>
                <Form.Item label="订单号" name="orderId">
                  <Input placeholder="请输入订单号" />
                </Form.Item>
              </Col>
              <Col span={6}>
                <Form.Item label="所属商家" name="merchantName">
                  <Select placeholder="搜索商家" showSearch style={{ width: '100%' }}>
                    <Option value="清风便利店">清风便利店</Option>
                    <Option value="星期八超市">星期八超市</Option>
                  </Select>
                </Form.Item>
              </Col>
              <Col span={6}>
                <Form.Item label="支付方式" name="paymentMethod">
                  <Select placeholder="请选择支付方式" allowClear>
                    {paymentMethodOptions.map(option => (
                      <Option key={option.value} value={option.value}>
                        {option.label}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={6}>
                <Form.Item label="支付状态" name="paymentStatus">
                  <Select placeholder="请选择支付状态" allowClear>
                    {paymentStatusOptions.map(option => (
                      <Option key={option.value} value={option.value}>
                        {option.label}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={6}>
                <Form.Item label="支付时间" name="paymentTime">
                  <RangePicker showTime style={{ width: '100%' }} />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label=" " colon={false}>
                  <Space>
                    <Button
                      type="primary"
                      htmlType="submit"
                      icon={<SearchOutlined />}
                      loading={loading}
                    >
                      搜索
                    </Button>
                    <Button
                      icon={<ReloadOutlined />}
                      onClick={handleReset}
                    >
                      重置
                    </Button>
                  </Space>
                </Form.Item>
              </Col>
            </Row>
          </Form>
        </Card>

        {/* 数据表格 */}
        <Card className="table-card">
          <div className="table-header" style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: '16px'
          }}>
            <div className="table-title" style={{ fontSize: '16px', fontWeight: 'bold' }}>
              收款记录列表
            </div>
            <div className="table-actions">
              <Space>
                <Button
                  type="primary"
                  icon={<FileExcelOutlined />}
                  onClick={handleExport}
                >
                  导出
                </Button>
                <Button
                  type="default"
                  onClick={handleGenerateTestData}
                  loading={loading}
                >
                  生成测试数据
                </Button>
                <Button
                  type="default"
                  danger
                  onClick={handleClearTestData}
                  loading={loading}
                >
                  清空数据
                </Button>
                <Tooltip title="刷新">
                  <Button
                    type="text"
                    icon={<ReloadOutlined />}
                    onClick={handleRefresh}
                    loading={loading}
                  />
                </Tooltip>
              </Space>
            </div>
          </div>

          <Table
            columns={columns}
            dataSource={filteredData}
            rowKey="id"
            pagination={{
              current: pagination.current,
              pageSize: pagination.pageSize,
              total: pagination.total,
              showSizeChanger: true,
              showQuickJumper: true,
              showTotal: (total, range) =>
                `第 ${range[0]}-${range[1]} 条/共 ${total} 条`,
              pageSizeOptions: ['10', '20', '50', '100'],
            }}
            loading={loading}
            scroll={{ x: 1200 }}
            size="middle"
            className="data-table"
            onChange={handleTableChange}
            pageSizeOptions={['10', '20', '50', '100']}
            defaultPageSize={10}
          />
      </div>
    </Card>

        {/* 详情模态框 */ }
  <Modal
    title="收款记录详情"
    open={detailModalVisible}
    onCancel={() => setDetailModalVisible(false)}
    footer={[
      <Button key="close" onClick={() => setDetailModalVisible(false)}>
        关闭
      </Button>
    ]}
    width={600}
  >
    {selectedRecord && (
      <div style={{ padding: '16px 0' }}>
        <Row gutter={[16, 16]}>
          <Col span={12}>
            <strong>收款单号：</strong>{selectedRecord.paymentId}
          </Col>
          <Col span={12}>
            <strong>关联订单：</strong>{selectedRecord.orderId}
          </Col>
          <Col span={12}>
            <strong>所属商家：</strong>{selectedRecord.merchantName}
          </Col>
          <Col span={12}>
            <strong>支付方式：</strong>{getPaymentMethodText(selectedRecord.paymentMethod)}
          </Col>
          <Col span={12}>
            <strong>订单金额：</strong>¥{selectedRecord.paymentAmount ? Number(selectedRecord.paymentAmount).toFixed(2) : '0.00'}
          </Col>
          <Col span={12}>
            <strong>实收金额：</strong>¥{selectedRecord.actualAmount ? Number(selectedRecord.actualAmount).toFixed(2) : '0.00'}
          </Col>
          <Col span={12}>
            <strong>支付状态：</strong>{getPaymentStatusTag(selectedRecord.paymentStatus)}
          </Col>
          <Col span={12}>
            <strong>支付时间：</strong>{selectedRecord.paymentTime}
          </Col>
          <Col span={12}>
            <strong>客户电话：</strong>{selectedRecord.customerPhone}
          </Col>
          <Col span={12}>
            <strong>交易流水号：</strong>{selectedRecord.transactionId || '无'}
          </Col>
          <Col span={24}>
            <strong>备注：</strong>{selectedRecord.remarks || '无'}
          </Col>
        </Row>
      </div>
    )}
  </Modal>
      </div >
    </OrderLayout >
  );
}; export default PaymentRecord;
